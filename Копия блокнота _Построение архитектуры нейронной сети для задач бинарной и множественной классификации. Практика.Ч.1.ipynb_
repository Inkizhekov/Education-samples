{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1mkR99AcWLh17MxhR_e6_PJIgXsQN8ibt","timestamp":1663579767287}],"collapsed_sections":[],"mount_file_id":"1mkR99AcWLh17MxhR_e6_PJIgXsQN8ibt","authorship_tag":"ABX9TyPXYwjMgtBXtsXLqycl5w4/"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"tehMtV07_oQp","executionInfo":{"status":"ok","timestamp":1663563829755,"user_tz":-420,"elapsed":5106,"user":{"displayName":"Анатолий Инкижеков","userId":"04854426355593330927"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import scipy\n","from sklearn.model_selection import StratifiedGroupKFold\n","\n","#sklearn\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.metrics import accuracy_score\n","\n","#Глубокое обучение\n","from tensorflow.keras import Sequential\n","from tensorflow.keras.layers import Dense\n","\n","from matplotlib import pyplot\n","\n","%matplotlib inline"]},{"cell_type":"markdown","source":["###Загрузка данных"],"metadata":{"id":"--E_75uUGaHu"}},{"cell_type":"code","source":["path = 'https://raw.githubusercontent.com/jbrownlee/Datasets/master/banknote_authentication.csv'"],"metadata":{"id":"7mN1Bg_yGzNj","executionInfo":{"status":"ok","timestamp":1663563829758,"user_tz":-420,"elapsed":13,"user":{"displayName":"Анатолий Инкижеков","userId":"04854426355593330927"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["df = pd.read_csv(path, header=None)\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"YdqF2cZ4IOW3","executionInfo":{"status":"ok","timestamp":1663563829759,"user_tz":-420,"elapsed":12,"user":{"displayName":"Анатолий Инкижеков","userId":"04854426355593330927"}},"outputId":"c07c445a-554d-45f2-f5ac-a5a3e8a55ac1"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         0       1       2        3  4\n","0  3.62160  8.6661 -2.8073 -0.44699  0\n","1  4.54590  8.1674 -2.4586 -1.46210  0\n","2  3.86600 -2.6383  1.9242  0.10645  0\n","3  3.45660  9.5228 -4.0112 -3.59440  0\n","4  0.32924 -4.4552  4.5718 -0.98880  0"],"text/html":["\n","  <div id=\"df-abe6e724-ee8d-49c3-87fa-e7faca376e28\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3.62160</td>\n","      <td>8.6661</td>\n","      <td>-2.8073</td>\n","      <td>-0.44699</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.54590</td>\n","      <td>8.1674</td>\n","      <td>-2.4586</td>\n","      <td>-1.46210</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3.86600</td>\n","      <td>-2.6383</td>\n","      <td>1.9242</td>\n","      <td>0.10645</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3.45660</td>\n","      <td>9.5228</td>\n","      <td>-4.0112</td>\n","      <td>-3.59440</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.32924</td>\n","      <td>-4.4552</td>\n","      <td>4.5718</td>\n","      <td>-0.98880</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-abe6e724-ee8d-49c3-87fa-e7faca376e28')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-abe6e724-ee8d-49c3-87fa-e7faca376e28 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-abe6e724-ee8d-49c3-87fa-e7faca376e28');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":3}]},{"cell_type":"markdown","source":["### Смотрим что получилось"],"metadata":{"id":"DMNyX9UUIWC-"}},{"cell_type":"code","source":["df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"EbCv-0kwDoLH","executionInfo":{"status":"ok","timestamp":1663563829760,"user_tz":-420,"elapsed":10,"user":{"displayName":"Анатолий Инкижеков","userId":"04854426355593330927"}},"outputId":"b67fae95-08a3-49e0-89b3-b3622a6c6703"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                 0            1            2            3            4\n","count  1372.000000  1372.000000  1372.000000  1372.000000  1372.000000\n","mean      0.433735     1.922353     1.397627    -1.191657     0.444606\n","std       2.842763     5.869047     4.310030     2.101013     0.497103\n","min      -7.042100   -13.773100    -5.286100    -8.548200     0.000000\n","25%      -1.773000    -1.708200    -1.574975    -2.413450     0.000000\n","50%       0.496180     2.319650     0.616630    -0.586650     0.000000\n","75%       2.821475     6.814625     3.179250     0.394810     1.000000\n","max       6.824800    12.951600    17.927400     2.449500     1.000000"],"text/html":["\n","  <div id=\"df-0edc6a3a-30f2-43c6-991e-9d51c8fa4556\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>1372.000000</td>\n","      <td>1372.000000</td>\n","      <td>1372.000000</td>\n","      <td>1372.000000</td>\n","      <td>1372.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>0.433735</td>\n","      <td>1.922353</td>\n","      <td>1.397627</td>\n","      <td>-1.191657</td>\n","      <td>0.444606</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>2.842763</td>\n","      <td>5.869047</td>\n","      <td>4.310030</td>\n","      <td>2.101013</td>\n","      <td>0.497103</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>-7.042100</td>\n","      <td>-13.773100</td>\n","      <td>-5.286100</td>\n","      <td>-8.548200</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>-1.773000</td>\n","      <td>-1.708200</td>\n","      <td>-1.574975</td>\n","      <td>-2.413450</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>0.496180</td>\n","      <td>2.319650</td>\n","      <td>0.616630</td>\n","      <td>-0.586650</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>2.821475</td>\n","      <td>6.814625</td>\n","      <td>3.179250</td>\n","      <td>0.394810</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>6.824800</td>\n","      <td>12.951600</td>\n","      <td>17.927400</td>\n","      <td>2.449500</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0edc6a3a-30f2-43c6-991e-9d51c8fa4556')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-0edc6a3a-30f2-43c6-991e-9d51c8fa4556 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-0edc6a3a-30f2-43c6-991e-9d51c8fa4556');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["df.corr()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"V4-cvfIlD7Vd","executionInfo":{"status":"ok","timestamp":1663563829760,"user_tz":-420,"elapsed":9,"user":{"displayName":"Анатолий Инкижеков","userId":"04854426355593330927"}},"outputId":"ce6cf99b-e468-4c19-a7bd-130dcfc893c8"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          0         1         2         3         4\n","0  1.000000  0.264026 -0.380850  0.276817 -0.724843\n","1  0.264026  1.000000 -0.786895 -0.526321 -0.444688\n","2 -0.380850 -0.786895  1.000000  0.318841  0.155883\n","3  0.276817 -0.526321  0.318841  1.000000 -0.023424\n","4 -0.724843 -0.444688  0.155883 -0.023424  1.000000"],"text/html":["\n","  <div id=\"df-9472eb8d-193d-4ce4-bd10-1d645c61c5ff\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.000000</td>\n","      <td>0.264026</td>\n","      <td>-0.380850</td>\n","      <td>0.276817</td>\n","      <td>-0.724843</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.264026</td>\n","      <td>1.000000</td>\n","      <td>-0.786895</td>\n","      <td>-0.526321</td>\n","      <td>-0.444688</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-0.380850</td>\n","      <td>-0.786895</td>\n","      <td>1.000000</td>\n","      <td>0.318841</td>\n","      <td>0.155883</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.276817</td>\n","      <td>-0.526321</td>\n","      <td>0.318841</td>\n","      <td>1.000000</td>\n","      <td>-0.023424</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-0.724843</td>\n","      <td>-0.444688</td>\n","      <td>0.155883</td>\n","      <td>-0.023424</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9472eb8d-193d-4ce4-bd10-1d645c61c5ff')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-9472eb8d-193d-4ce4-bd10-1d645c61c5ff button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-9472eb8d-193d-4ce4-bd10-1d645c61c5ff');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xkKuH_-lEHGl","executionInfo":{"status":"ok","timestamp":1663563830319,"user_tz":-420,"elapsed":21,"user":{"displayName":"Анатолий Инкижеков","userId":"04854426355593330927"}},"outputId":"50964352-e8dd-4af7-cb3d-6e09f3000700"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1372 entries, 0 to 1371\n","Data columns (total 5 columns):\n"," #   Column  Non-Null Count  Dtype  \n","---  ------  --------------  -----  \n"," 0   0       1372 non-null   float64\n"," 1   1       1372 non-null   float64\n"," 2   2       1372 non-null   float64\n"," 3   3       1372 non-null   float64\n"," 4   4       1372 non-null   int64  \n","dtypes: float64(4), int64(1)\n","memory usage: 53.7 KB\n"]}]},{"cell_type":"code","source":["df[4].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"F_Yhe9CBEOks","executionInfo":{"status":"ok","timestamp":1663563830320,"user_tz":-420,"elapsed":19,"user":{"displayName":"Анатолий Инкижеков","userId":"04854426355593330927"}},"outputId":"9d2fb65a-27ff-4ab1-fdda-7d3c2a21b9ff"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    762\n","1    610\n","Name: 4, dtype: int64"]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["### Создание выбоки"],"metadata":{"id":"Cw5a7A9HEe10"}},{"cell_type":"code","source":["# Создаем X и y\n","X, y = df.values[: , : -1], df.values[:, -1]"],"metadata":{"id":"SWSwWF4QEvjM","executionInfo":{"status":"ok","timestamp":1663563830320,"user_tz":-420,"elapsed":17,"user":{"displayName":"Анатолий Инкижеков","userId":"04854426355593330927"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["X = X.astype('float32') # переводим в float32"],"metadata":{"id":"teA1CUikFJKK","executionInfo":{"status":"ok","timestamp":1663563830321,"user_tz":-420,"elapsed":17,"user":{"displayName":"Анатолий Инкижеков","userId":"04854426355593330927"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["X[1]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_CXTdrFpFS50","executionInfo":{"status":"ok","timestamp":1663563830321,"user_tz":-420,"elapsed":16,"user":{"displayName":"Анатолий Инкижеков","userId":"04854426355593330927"}},"outputId":"83a11415-0642-4eed-ece2-47c8145536e0"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 4.5459,  8.1674, -2.4586, -1.4621], dtype=float32)"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["y[1]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ndctor5oFV7q","executionInfo":{"status":"ok","timestamp":1663563830322,"user_tz":-420,"elapsed":16,"user":{"displayName":"Анатолий Инкижеков","userId":"04854426355593330927"}},"outputId":"4d067d71-86f4-464c-dba0-ded392f1db09"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.0"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["#LabelEncoder для y\n","y = LabelEncoder().fit_transform(y)"],"metadata":{"id":"VbEo2DJwLwWH","executionInfo":{"status":"ok","timestamp":1663563830322,"user_tz":-420,"elapsed":14,"user":{"displayName":"Анатолий Инкижеков","userId":"04854426355593330927"}}},"execution_count":12,"outputs":[]},{"cell_type":"markdown","source":["###Train_test_split"],"metadata":{"id":"_Ta2Vu3cMAKE"}},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, shuffle = True)"],"metadata":{"id":"qCPAkv06M5Ow","executionInfo":{"status":"ok","timestamp":1663563830323,"user_tz":-420,"elapsed":15,"user":{"displayName":"Анатолий Инкижеков","userId":"04854426355593330927"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["print(X_train.shape)\n","print(X_test.shape)\n","print(y_train.shape)\n","print(y_test.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x6Pb__qHNTAK","executionInfo":{"status":"ok","timestamp":1663563830323,"user_tz":-420,"elapsed":14,"user":{"displayName":"Анатолий Инкижеков","userId":"04854426355593330927"}},"outputId":"eec4f8bb-8d23-46ac-d979-ee5ae8cd9107"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["(1029, 4)\n","(343, 4)\n","(1029,)\n","(343,)\n"]}]},{"cell_type":"code","source":["y_test\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"56NlOk-1J64j","executionInfo":{"status":"ok","timestamp":1663563830324,"user_tz":-420,"elapsed":14,"user":{"displayName":"Анатолий Инкижеков","userId":"04854426355593330927"}},"outputId":"bd07e594-3a1d-4204-dd4f-ab06fb1cd6ee"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n","       0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1,\n","       1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1,\n","       0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1,\n","       0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n","       0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1,\n","       1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,\n","       0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1,\n","       1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,\n","       1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0,\n","       0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1,\n","       0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0,\n","       0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1,\n","       0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1,\n","       1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0,\n","       0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1])"]},"metadata":{},"execution_count":15}]},{"cell_type":"markdown","source":["###Нейронная сеть"],"metadata":{"id":"y8vwWsUdNnJc"}},{"cell_type":"code","source":["n_features = X.shape[1] #размерность X"],"metadata":{"id":"I9rOdmvSNwFy","executionInfo":{"status":"ok","timestamp":1663563830324,"user_tz":-420,"elapsed":12,"user":{"displayName":"Анатолий Инкижеков","userId":"04854426355593330927"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["model = Sequential()\n","model.add(Dense(20, activation = 'relu', input_shape = (n_features, 4)))\n","model.add(Dense(10, activation = 'relu'))\n","#Выходной слой\n","model.add(Dense(1, activation = 'sigmoid'))\n","\n","#Компилируем модель\n","model.compile(optimizer = 'adam', loss = 'binary_crossentropy', run_eagerly=True)\n","\n","#Обучаем модель\n","\n","history = model.fit(X_train, y_train,\n","                    epochs = 20,\n","                    batch_size = 32,\n","                    verbose = 1,\n","                    validation_data=(X_test, y_test))\n","\n","#predict test_set\n","yhat = model.predict((X_test) > 0.5).astype(\"int32\")\n","\n","# Валидируем наш прогноз\n","score = accuracy_score(y_test, yhat)\n","\n","print ('Accuracy: ', score)\n","\n","# визуализация процесса обучения\n","\n","pyplot.title('Обучение')\n","pyplot.xlabel('Эпохи')\n","pyplot.ylabel('binary_crossentropy')\n","pyplot.plot(history.history['loss'], label = 'train')\n","pyplot.plot(history.history['val_loss'], label = 'validation')\n","pyplot.legend()\n","pyplot.show\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"v5BlPspLULG2","executionInfo":{"status":"ok","timestamp":1663563839221,"user_tz":-420,"elapsed":8909,"user":{"displayName":"Анатолий Инкижеков","userId":"04854426355593330927"}},"outputId":"bba96fdf-2208-4386-b67b-ee43cf236f38"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","33/33 [==============================] - 1s 14ms/step - loss: 0.8450 - val_loss: 0.5377\n","Epoch 2/20\n","33/33 [==============================] - 0s 11ms/step - loss: 0.3844 - val_loss: 0.2495\n","Epoch 3/20\n","33/33 [==============================] - 0s 12ms/step - loss: 0.1898 - val_loss: 0.1541\n","Epoch 4/20\n","33/33 [==============================] - 0s 12ms/step - loss: 0.1252 - val_loss: 0.1131\n","Epoch 5/20\n","33/33 [==============================] - 0s 12ms/step - loss: 0.0945 - val_loss: 0.0903\n","Epoch 6/20\n","33/33 [==============================] - 0s 12ms/step - loss: 0.0756 - val_loss: 0.0736\n","Epoch 7/20\n","33/33 [==============================] - 0s 12ms/step - loss: 0.0612 - val_loss: 0.0622\n","Epoch 8/20\n","33/33 [==============================] - 0s 11ms/step - loss: 0.0512 - val_loss: 0.0531\n","Epoch 9/20\n","33/33 [==============================] - 0s 13ms/step - loss: 0.0435 - val_loss: 0.0458\n","Epoch 10/20\n","33/33 [==============================] - 0s 12ms/step - loss: 0.0376 - val_loss: 0.0404\n","Epoch 11/20\n","33/33 [==============================] - 0s 12ms/step - loss: 0.0327 - val_loss: 0.0351\n","Epoch 12/20\n","33/33 [==============================] - 0s 11ms/step - loss: 0.0288 - val_loss: 0.0316\n","Epoch 13/20\n","33/33 [==============================] - 0s 11ms/step - loss: 0.0256 - val_loss: 0.0279\n","Epoch 14/20\n","33/33 [==============================] - 0s 12ms/step - loss: 0.0227 - val_loss: 0.0248\n","Epoch 15/20\n","33/33 [==============================] - 0s 12ms/step - loss: 0.0202 - val_loss: 0.0224\n","Epoch 16/20\n","33/33 [==============================] - 0s 12ms/step - loss: 0.0181 - val_loss: 0.0204\n","Epoch 17/20\n","33/33 [==============================] - 0s 11ms/step - loss: 0.0162 - val_loss: 0.0181\n","Epoch 18/20\n","33/33 [==============================] - 0s 12ms/step - loss: 0.0146 - val_loss: 0.0167\n","Epoch 19/20\n","33/33 [==============================] - 0s 12ms/step - loss: 0.0132 - val_loss: 0.0147\n","Epoch 20/20\n","33/33 [==============================] - 0s 13ms/step - loss: 0.0121 - val_loss: 0.0132\n","Accuracy:  0.5801749271137027\n"]},{"output_type":"execute_result","data":{"text/plain":["<function matplotlib.pyplot.show(*args, **kw)>"]},"metadata":{},"execution_count":17},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["### Cros_val"],"metadata":{"id":"fzMkUYCIUO7u","executionInfo":{"status":"ok","timestamp":1663563839222,"user_tz":-420,"elapsed":19,"user":{"displayName":"Анатолий Инкижеков","userId":"04854426355593330927"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["kfold = StratifiedGroupKFold(10)\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, shuffle = True)\n","print(X_train.shape)\n","print(X_test.shape)\n","print(y_train.shape)\n","print(y_test.shape)\n","\n","\n","scores = [] #Пустой список метрик"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZeouljoKMBOO","executionInfo":{"status":"ok","timestamp":1663564790567,"user_tz":-420,"elapsed":288,"user":{"displayName":"Анатолий Инкижеков","userId":"04854426355593330927"}},"outputId":"28dde3ca-bcf4-4451-a6a5-c13b515bd54a"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["(1029, 4)\n","(343, 4)\n","(1029,)\n","(343,)\n"]}]},{"cell_type":"code","source":["\n","\n","for train_ix, test_ix in kfold.split(X,y):\n","  X_train, X_test, y_train, y_test = X[train_ix], X[test_ix], y[train_ix], y[test_ix] \n","  n_features = X.shape[1] #размерность X\n","\n","  model = Sequential()\n","  model.add(Dense(20, activation = 'relu', input_shape = (n_features, )))\n","  model.add(Dense(10, activation = 'relu'))\n","  #Выходной слой\n","  model.add(Dense(1, activation = 'sigmoid'))\n","  #Компилируем модель\n","  model.compile(optimizer = 'adam', loss = 'binary_crossentropy')\n","  #Обучаем модель\n","  history2 = model.fit(X_train, y_train,\n","                      epochs = 20,\n","                      batch_size = 32,\n","                      verbose = 1,\n","                      validation_data=(X_test, y_test))\n","  #predict test_set\n","  yhat = model.predict((X_test) > 0.5).astype(\"int32\")\n","  # Валидируем наш прогноз\n","  score = accuracy_score(y_test, yhat)\n","  print ('Accuracy: ', score)\n","  # визуализация процесса обучения\n","  pyplot.title('Обучение')\n","  pyplot.xlabel('Эпохи')\n","  pyplot.ylabel('binary_crossentropy')\n","  pyplot.plot(history.history['loss'], label = 'train')\n","  pyplot.plot(history.history['val_loss'], label = 'validation')\n","  pyplot.legend()\n","  pyplot.show()\n","\n","  scores.append(score)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"tDModztYL-1K","executionInfo":{"status":"error","timestamp":1663564857035,"user_tz":-420,"elapsed":5593,"user":{"displayName":"Анатолий Инкижеков","userId":"04854426355593330927"}},"outputId":"881a576b-103c-4817-8dc6-1bf2627cfd59"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","43/43 [==============================] - 1s 4ms/step - loss: 0.6190 - val_loss: 0.1984\n","Epoch 2/20\n","43/43 [==============================] - 0s 2ms/step - loss: 0.4328 - val_loss: 0.0581\n","Epoch 3/20\n","43/43 [==============================] - 0s 2ms/step - loss: 0.2822 - val_loss: 0.0173\n","Epoch 4/20\n","43/43 [==============================] - 0s 2ms/step - loss: 0.1680 - val_loss: 0.0080\n","Epoch 5/20\n","43/43 [==============================] - 0s 1ms/step - loss: 0.1051 - val_loss: 0.0034\n","Epoch 6/20\n","43/43 [==============================] - 0s 2ms/step - loss: 0.0690 - val_loss: 0.0024\n","Epoch 7/20\n","43/43 [==============================] - 0s 2ms/step - loss: 0.0478 - val_loss: 8.6840e-04\n","Epoch 8/20\n","43/43 [==============================] - 0s 2ms/step - loss: 0.0347 - val_loss: 6.1998e-04\n","Epoch 9/20\n","43/43 [==============================] - 0s 1ms/step - loss: 0.0263 - val_loss: 3.5469e-04\n","Epoch 10/20\n","43/43 [==============================] - 0s 1ms/step - loss: 0.0206 - val_loss: 2.0858e-04\n","Epoch 11/20\n","43/43 [==============================] - 0s 1ms/step - loss: 0.0165 - val_loss: 1.3676e-04\n","Epoch 12/20\n","43/43 [==============================] - 0s 1ms/step - loss: 0.0136 - val_loss: 1.0017e-04\n","Epoch 13/20\n","43/43 [==============================] - 0s 1ms/step - loss: 0.0113 - val_loss: 6.2210e-05\n","Epoch 14/20\n","43/43 [==============================] - 0s 1ms/step - loss: 0.0095 - val_loss: 4.2165e-05\n","Epoch 15/20\n","43/43 [==============================] - 0s 1ms/step - loss: 0.0082 - val_loss: 3.2301e-05\n","Epoch 16/20\n","43/43 [==============================] - 0s 1ms/step - loss: 0.0071 - val_loss: 2.2446e-05\n","Epoch 17/20\n","43/43 [==============================] - 0s 2ms/step - loss: 0.0062 - val_loss: 1.5266e-05\n","Epoch 18/20\n","43/43 [==============================] - 0s 1ms/step - loss: 0.0054 - val_loss: 1.1688e-05\n","Epoch 19/20\n","43/43 [==============================] - 0s 1ms/step - loss: 0.0048 - val_loss: 8.4504e-06\n","Epoch 20/20\n","43/43 [==============================] - 0s 1ms/step - loss: 0.0043 - val_loss: 6.2201e-06\n","Accuracy:  1.0\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","43/43 [==============================] - 0s 2ms/step - loss: 0.6601\n","Epoch 2/20\n","43/43 [==============================] - 0s 1ms/step - loss: 0.3574\n","Epoch 3/20\n","43/43 [==============================] - 0s 2ms/step - loss: 0.2271\n","Epoch 4/20\n","43/43 [==============================] - 0s 1ms/step - loss: 0.1502\n","Epoch 5/20\n","43/43 [==============================] - 0s 1ms/step - loss: 0.0981\n","Epoch 6/20\n","43/43 [==============================] - 0s 1ms/step - loss: 0.0706\n","Epoch 7/20\n","43/43 [==============================] - 0s 1ms/step - loss: 0.0536\n","Epoch 8/20\n","43/43 [==============================] - 0s 1ms/step - loss: 0.0417\n","Epoch 9/20\n","43/43 [==============================] - 0s 1ms/step - loss: 0.0333\n","Epoch 10/20\n","43/43 [==============================] - 0s 2ms/step - loss: 0.0271\n","Epoch 11/20\n","43/43 [==============================] - 0s 2ms/step - loss: 0.0223\n","Epoch 12/20\n","43/43 [==============================] - 0s 1ms/step - loss: 0.0188\n","Epoch 13/20\n","43/43 [==============================] - 0s 1ms/step - loss: 0.0158\n","Epoch 14/20\n","43/43 [==============================] - 0s 1ms/step - loss: 0.0136\n","Epoch 15/20\n","43/43 [==============================] - 0s 1ms/step - loss: 0.0117\n","Epoch 16/20\n","43/43 [==============================] - 0s 1ms/step - loss: 0.0102\n","Epoch 17/20\n","43/43 [==============================] - 0s 2ms/step - loss: 0.0090\n","Epoch 18/20\n","43/43 [==============================] - 0s 1ms/step - loss: 0.0078\n","Epoch 19/20\n","43/43 [==============================] - 0s 1ms/step - loss: 0.0070\n","Epoch 20/20\n","43/43 [==============================] - 0s 1ms/step - loss: 0.0062\n"]},{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-26-dbe1d69db572>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     17\u001b[0m                       validation_data=(X_test, y_test))\n\u001b[1;32m     18\u001b[0m   \u001b[0;31m#predict test_set\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m   \u001b[0myhat\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0.5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"int32\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m   \u001b[0;31m# Валидируем наш прогноз\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m   \u001b[0mscore\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maccuracy_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0myhat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, x, batch_size, verbose, steps, callbacks, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1995\u001b[0m             \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_predict_batch_end\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mend_step\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m'outputs'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mbatch_outputs\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1996\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mbatch_outputs\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1997\u001b[0;31m         raise ValueError('Unexpected result of `predict_function` '\n\u001b[0m\u001b[1;32m   1998\u001b[0m                          \u001b[0;34m'(Empty batch_outputs). Please use '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1999\u001b[0m                          \u001b[0;34m'`Model.compile(..., run_eagerly=True)`, or '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Unexpected result of `predict_function` (Empty batch_outputs). Please use `Model.compile(..., run_eagerly=True)`, or `tf.config.run_functions_eagerly(True)` for more information of where went wrong, or file a issue/bug to `tf.keras`."]}]},{"cell_type":"code","source":[],"metadata":{"id":"Zxj7DMGpL88f"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print('Средняя точность при кросс-валидации Cross_val: ', (np.mean(scores)))"],"metadata":{"id":"cXvCbfWVXReL","executionInfo":{"status":"ok","timestamp":1663564984721,"user_tz":-420,"elapsed":298,"user":{"displayName":"Анатолий Инкижеков","userId":"04854426355593330927"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"497f772e-151d-4508-f909-48a609b4f736"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["Средняя точность при кросс-валидации Cross_val:  1.0\n"]}]}]}