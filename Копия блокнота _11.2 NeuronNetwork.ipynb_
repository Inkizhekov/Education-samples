{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1yFavFZ6TMFyNIJ4gXMwaUKdEi8eOL0pG","timestamp":1662328995013}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Многослойная нейронная сеть\n","**Цель работы** - исследовать функционирование многослойной\n","нейронной сети (МНС) прямого распространения и ее обучение методом\n","обратного распространения ошибки."],"metadata":{"id":"JtGzMn6l-Hxj"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"hdl2QOu599aJ"},"outputs":[],"source":["import numpy as np\n","\n","class NeuronNetwork:\n","  def __init__(self, x, t):\n","    \"\"\"\n","    Конструктор класса модели двухслойной сети. \n","    Принимает на вход входной вектор x и вектор целевых значений t\n","\n","    \"\"\"\n","    self.rateOfTraining = 0.3 # норма обучения\n","    self.hiddenX = []         # значение входного вектора для скрытого слоя\n","    self.hiddenWeight = []    # значения весов для скрытого слоя\n","    self.target = []          # целевые значения выходов (t)\n","    self.outNet = []          # комбинироанный вход нейронов выходного слоя (net)\n","    self.outDelta = []        # ошибка выхода нейронов выходного слоя (delta)\n","    self.outOut = []          # выходные значения выходных нейронов (y)\n","    self.outWeight = []       # веса связей выходных нейронов выходного слоя  \n","    self.outX = []            # входной вектор для нейронов выходного слоя\n","    self.hiddenNet = []       # комбинироанный вход нейронов скрытого слоя (net)\n","    self.hiddenOut = []       # выходные значения выходных нейронов скрытого слоя (out)\n","    self.hiddenDelta = []     # ошибка выхода нейронов скрытого слоя (delta)\n","\n","    for i in range(len(x)):     \n","      self.hiddenX.append(x[i])     # заполним вход скрытого слоя входным вектором x\n","      self.hiddenWeight.append(0.5) # для начала обучения вес может быть случайной малой величиной, пусть будет 0.5\n","    \n","    for i in range(len(t)):\n","      self.target.append(t[i]); # целевые значения выходов (t)\n","      self.outNet.append(0);    # комбинироанный вход нейронов выходного слоя (net)\n","      self.outDelta.append(0);  # ошибка выхода нейронов выходного слоя (delta)\n","      self.outOut.append(0);    # выходные значения выходных нейронов (y)\n","\n","    for _ in range(len(self.target)):\n","      self.outWeight.append(0.5)  # веса связей выходных нейронов выходного слоя\n","      self.outWeight.append(0.5)  # веса связей единичного смещения выходного слоя\n","\n","      # входной вектор для нейронов выходного слоя\n","      self.outX.append(0)  # четные индексы для входных сигналов с предыдущего слоя\n","      self.outX.append(1)  # нечетные индексы для единичных смещений\n","\n","    for _ in range(len(self.hiddenX) - 1):\n","      self.hiddenNet.append(0)    # комбинироанный вход нейронов скрытого слоя (net)\n","      self.hiddenOut.append(0)    # выходные значения выходных нейронов скрытого слоя (out)\n","      self.hiddenDelta.append(0)  # ошибка выхода нейронов скрытого слоя (delta)\n","\n","    self.error = []   # массив ошибок для каждой эпохи обучения\n","\n","  @staticmethod  \n","  def fa(net):\n","    \"\"\"\n","    Функция активации: смещенная сигмоида\n","    \"\"\"\n","    net = np.array(net)\n","    return (1 - np.exp(-net)) / (1 + np.exp(-net));\n","  \n","  def derivative(self, net):\n","    \"\"\"\n","    Производная от функции активации: \n","    \"\"\"\n","    net = np.array(net)\n","    return 0.5 * (1 - (self.fa(net)) * (self.fa(net)))\n","\n","  @staticmethod\n","  def net(x, weight):\n","    \"\"\"\n","    Комбинированный вход\n","    \"\"\"\n","    net = []  \n","    for i in range(len(weight)):\n","      if (i % 2 == 0):  # только для четных i \n","        c = i+1;        # для с равного следующему после i нечетному числу\n","        # комбинированный вход рассчитываетс как сумма произведений сигнала и веса\n","        net.append((weight[i] * x[i] +  # входных сигналов\n","                    weight[c] * x[c]))  # единичных смещений\n","    return net\n","  \n","\n","  def train(self):\n","    \"\"\"\n","    Функция обучения сети\n","    \"\"\"\n","    # заголовок таблицы\n","    \n","    print(\"Эпоха  Веса скрытого слоя                Веса выходного слоя                            Выход НС            Значение ошибки\")\n","    \n","    error = 1;    # инициализация ошибки\n","    self.epoch = 1; # номер эпохи\n","\n","    while (error > 0.001):    # продолжаем обучения пока ошибка не станет меньше заданной \n","      #print(f\"Эпоха #{self.epoch}\", end=' ')\n","      print(f\"{self.epoch}\", end='\\t')\n","      print(' | ', end='')\n","      \n","      #print(\"Веса скрытого слоя: \", end='')\n","      for hw in self.hiddenWeight:\n","        print(format(hw, '.4f'), end='\\t')\n","      print(' | ', end='')\n","\n","      #print(\"Веса выходного слоя: \", end='')\n","      for ow in self.outWeight:\n","        print(format(ow, '.4f'), end='\\t')\n","      print(' | ', end='')\n","      # 1 этап - прямой проход\n","      # рассчитываем комбинированный вход нейронов скрытого слоя\n","      tmpNet = self.net(self.hiddenX, self.hiddenWeight)\n","      self.hiddenNet = tmpNet   \n","      \n","      # рассчитываем выходы нейронов скрытого слоя через ФА \n","      self.hiddenOut = self.fa(self.hiddenNet)\n","\n","      # перенос выхода нейрона скрытого слоя (он у нас один) на входы нейронов выходного слоя\n","      for i in range(2 * len(self.target)):\n","        if i % 2 == 0:\n","          self.outX[i] = self.hiddenOut[(len(self.hiddenOut) - 1)];\n","      \n","      tmpNet = []\n","      # рассчитаем комбинированный вход для выходного слоя\n","      tmpNet = self.net(self.outX, self.outWeight) \n","\n","      # заполним комбинированные входы и выходные сигналы выходного слоя\n","      for i in range(len(self.outOut)):\n","        self.outNet[i] = tmpNet[i]\n","        self.outOut[i] = self.fa(self.outNet[i])\n","      \n","      # 2 этап - расчет ошибки\n","      for i in range(len(self.outDelta)):\n","        # расчет ошибки каждого нейрона выходного слоя через произведение\n","        # ошибки и производной ФА в точке значения выхода\n","        self.outDelta[i] = (self.target[i] - self.outOut[i]) * self.derivative(self.outOut[i])\n","      \n","      # рассчитаем ошибку для нейрона скрытого слоя через веса \n","      # его связей с выходным слоем, ошибку выходного слоя и производную ФА в точке выхода\n","      for i in range(len(self.hiddenDelta)):\n","        e = 0;\n","        for j in range(len(self.outWeight)):\n","          if j % 2 == 0:\n","            e +=  (self.outWeight[i] * \n","                  self.outDelta[j // 2]);\n","        \n","        self.hiddenDelta[i] = (\n","            (self.derivative(self.hiddenOut[i])) * (e))\n","      \n","      # 3 этап - коррекция весов\n","      for i in range(len(self.outWeight)):\n","        if (i % 2 == 0):  # коррекция веса входа нейрона выходного слоя \n","          self.outWeight[i] += self.rateOfTraining * self.hiddenOut[(len(self.hiddenOut) - 1)] * self.outDelta[i // 2]\n","        if (i % 2 == 1):  # коррекция веса единичного смещения нейрона выходного слоя\n","          self.outWeight[i] += self.rateOfTraining * 1 * self.outDelta[i // 2];\n","      \n","      # коррекция веса нейрона скрытого слоя\n","      for i in range(len(self.hiddenWeight)):\n","        self.hiddenWeight[i] += self.rateOfTraining * self.hiddenX[i] * self.hiddenDelta[(len(self.hiddenDelta) - 1)]\n","      \n","      # расчет среднеквадратичной ошибки MSE\n","      error = 0\n","      for i in range(len(self.target)):\n","        error += ((self.target[i] - self.outOut[i]) * (self.target[i] - self.outOut[i]));\n","      error = np.sqrt(error);\n","      self.epoch += 1;\n","      \n","      #print(\"Выход НС:\", end='')\n","      for i in range(len(self.outOut)):\n","        print(format(self.outOut[i], '.4f'), end='\\t')\n","      print(' | ', end='')\n","      #print(f\"Значение ошибки: {error:.6f}\")\n","      \n","      print(f\"{error:.6f}\")\n","      self.error.append(error)\n","\n","    print()\n","    print(f\"Обучение завершено за {self.epoch-1} эпох!\")"]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","x = [1, -2]\n","t = [0.2, 0.1, 0.3]\n","net = NeuronNetwork(x, t)\n","net.train()\n","\n","fig = plt.figure(figsize=(15,5))\n","plt.plot(net.error, 'bo--', label = 'Среднеквадратичная ошибка')\n","plt.xlabel('Количество эпох')\n","plt.ylabel('Среднеквадратичная ошибка')\n","plt.xlim(0, net.epoch)\n","\n","plt.grid()\n","plt.legend()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"ht0TTm4sfj9V","executionInfo":{"status":"ok","timestamp":1662315867600,"user_tz":-360,"elapsed":1248,"user":{"displayName":"Skyline MR","userId":"07373862127555986740"}},"outputId":"71d252f9-8564-4da0-ca64-bf2bfb05c48f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Эпоха  Веса скрытого слоя                Веса выходного слоя                            Выход НС            Значение ошибки\n","1\t | 0.5000\t0.5000\t | 0.5000\t0.5000\t0.5000\t0.5000\t0.5000\t0.5000\t | 0.1866\t0.1866\t0.1866\t | 0.143325\n","2\t | 0.5015\t0.4970\t | 0.4995\t0.5020\t0.5032\t0.4871\t0.4959\t0.5169\t | 0.1884\t0.1808\t0.1960\t | 0.132213\n","3\t | 0.5027\t0.4945\t | 0.4991\t0.5037\t0.5061\t0.4751\t0.4921\t0.5323\t | 0.1900\t0.1754\t0.2046\t | 0.122033\n","4\t | 0.5038\t0.4923\t | 0.4987\t0.5052\t0.5087\t0.4639\t0.4888\t0.5465\t | 0.1914\t0.1703\t0.2123\t | 0.112692\n","5\t | 0.5048\t0.4905\t | 0.4984\t0.5065\t0.5112\t0.4534\t0.4857\t0.5595\t | 0.1926\t0.1654\t0.2194\t | 0.104110\n","6\t | 0.5056\t0.4888\t | 0.4982\t0.5076\t0.5135\t0.4437\t0.4829\t0.5714\t | 0.1936\t0.1609\t0.2258\t | 0.096217\n","7\t | 0.5063\t0.4874\t | 0.4980\t0.5085\t0.5156\t0.4346\t0.4804\t0.5824\t | 0.1945\t0.1567\t0.2317\t | 0.088949\n","8\t | 0.5069\t0.4862\t | 0.4978\t0.5094\t0.5175\t0.4261\t0.4780\t0.5925\t | 0.1952\t0.1527\t0.2370\t | 0.082253\n","9\t | 0.5074\t0.4851\t | 0.4976\t0.5101\t0.5193\t0.4183\t0.4759\t0.6019\t | 0.1959\t0.1490\t0.2419\t | 0.076079\n","10\t | 0.5079\t0.4842\t | 0.4975\t0.5107\t0.5210\t0.4110\t0.4739\t0.6104\t | 0.1965\t0.1455\t0.2464\t | 0.070382\n","11\t | 0.5083\t0.4834\t | 0.4974\t0.5112\t0.5225\t0.4042\t0.4722\t0.6184\t | 0.1970\t0.1423\t0.2505\t | 0.065124\n","12\t | 0.5087\t0.4827\t | 0.4973\t0.5117\t0.5239\t0.3979\t0.4705\t0.6257\t | 0.1974\t0.1392\t0.2543\t | 0.060268\n","13\t | 0.5090\t0.4821\t | 0.4972\t0.5120\t0.5253\t0.3920\t0.4690\t0.6324\t | 0.1978\t0.1364\t0.2578\t | 0.055782\n","14\t | 0.5092\t0.4815\t | 0.4971\t0.5124\t0.5265\t0.3866\t0.4676\t0.6386\t | 0.1981\t0.1338\t0.2610\t | 0.051636\n","15\t | 0.5095\t0.4810\t | 0.4970\t0.5127\t0.5276\t0.3815\t0.4663\t0.6444\t | 0.1984\t0.1313\t0.2639\t | 0.047804\n","16\t | 0.5097\t0.4806\t | 0.4970\t0.5129\t0.5286\t0.3769\t0.4651\t0.6497\t | 0.1986\t0.1290\t0.2666\t | 0.044260\n","17\t | 0.5099\t0.4802\t | 0.4969\t0.5131\t0.5296\t0.3725\t0.4640\t0.6546\t | 0.1988\t0.1269\t0.2691\t | 0.040983\n","18\t | 0.5101\t0.4799\t | 0.4969\t0.5133\t0.5305\t0.3685\t0.4630\t0.6592\t | 0.1990\t0.1249\t0.2714\t | 0.037951\n","19\t | 0.5102\t0.4795\t | 0.4969\t0.5134\t0.5313\t0.3648\t0.4621\t0.6634\t | 0.1992\t0.1231\t0.2735\t | 0.035147\n","20\t | 0.5104\t0.4793\t | 0.4968\t0.5135\t0.5321\t0.3613\t0.4612\t0.6673\t | 0.1993\t0.1214\t0.2755\t | 0.032552\n","21\t | 0.5105\t0.4790\t | 0.4968\t0.5136\t0.5328\t0.3581\t0.4604\t0.6709\t | 0.1994\t0.1198\t0.2773\t | 0.030150\n","22\t | 0.5106\t0.4788\t | 0.4968\t0.5137\t0.5334\t0.3552\t0.4597\t0.6742\t | 0.1995\t0.1184\t0.2790\t | 0.027928\n","23\t | 0.5107\t0.4786\t | 0.4968\t0.5138\t0.5340\t0.3524\t0.4590\t0.6773\t | 0.1996\t0.1170\t0.2805\t | 0.025870\n","24\t | 0.5108\t0.4784\t | 0.4968\t0.5139\t0.5346\t0.3499\t0.4584\t0.6802\t | 0.1997\t0.1158\t0.2820\t | 0.023965\n","25\t | 0.5109\t0.4782\t | 0.4968\t0.5139\t0.5351\t0.3475\t0.4578\t0.6828\t | 0.1998\t0.1146\t0.2833\t | 0.022202\n","26\t | 0.5110\t0.4781\t | 0.4967\t0.5139\t0.5356\t0.3453\t0.4573\t0.6853\t | 0.1998\t0.1135\t0.2845\t | 0.020570\n","27\t | 0.5110\t0.4780\t | 0.4967\t0.5140\t0.5360\t0.3433\t0.4568\t0.6876\t | 0.1999\t0.1125\t0.2856\t | 0.019058\n","28\t | 0.5111\t0.4778\t | 0.4967\t0.5140\t0.5364\t0.3414\t0.4563\t0.6897\t | 0.1999\t0.1116\t0.2867\t | 0.017658\n","29\t | 0.5111\t0.4777\t | 0.4967\t0.5140\t0.5368\t0.3397\t0.4559\t0.6916\t | 0.2000\t0.1107\t0.2876\t | 0.016361\n","30\t | 0.5112\t0.4776\t | 0.4967\t0.5140\t0.5372\t0.3381\t0.4555\t0.6935\t | 0.2000\t0.1099\t0.2885\t | 0.015161\n","31\t | 0.5112\t0.4775\t | 0.4967\t0.5140\t0.5375\t0.3366\t0.4551\t0.6951\t | 0.2000\t0.1092\t0.2894\t | 0.014048\n","32\t | 0.5113\t0.4774\t | 0.4967\t0.5140\t0.5378\t0.3352\t0.4548\t0.6967\t | 0.2001\t0.1085\t0.2901\t | 0.013018\n","33\t | 0.5113\t0.4773\t | 0.4967\t0.5140\t0.5381\t0.3340\t0.4545\t0.6981\t | 0.2001\t0.1079\t0.2909\t | 0.012064\n","34\t | 0.5114\t0.4773\t | 0.4967\t0.5140\t0.5383\t0.3328\t0.4542\t0.6995\t | 0.2001\t0.1073\t0.2915\t | 0.011180\n","35\t | 0.5114\t0.4772\t | 0.4967\t0.5139\t0.5386\t0.3317\t0.4539\t0.7007\t | 0.2001\t0.1067\t0.2921\t | 0.010361\n","36\t | 0.5114\t0.4771\t | 0.4967\t0.5139\t0.5388\t0.3307\t0.4537\t0.7019\t | 0.2001\t0.1062\t0.2927\t | 0.009603\n","37\t | 0.5115\t0.4771\t | 0.4967\t0.5139\t0.5390\t0.3298\t0.4534\t0.7030\t | 0.2001\t0.1058\t0.2932\t | 0.008900\n","38\t | 0.5115\t0.4770\t | 0.4968\t0.5139\t0.5392\t0.3289\t0.4532\t0.7040\t | 0.2001\t0.1053\t0.2937\t | 0.008249\n","39\t | 0.5115\t0.4770\t | 0.4968\t0.5139\t0.5394\t0.3281\t0.4530\t0.7049\t | 0.2001\t0.1050\t0.2942\t | 0.007645\n","40\t | 0.5115\t0.4769\t | 0.4968\t0.5139\t0.5395\t0.3273\t0.4528\t0.7057\t | 0.2001\t0.1046\t0.2946\t | 0.007086\n","41\t | 0.5116\t0.4769\t | 0.4968\t0.5138\t0.5397\t0.3267\t0.4526\t0.7065\t | 0.2001\t0.1042\t0.2950\t | 0.006568\n","42\t | 0.5116\t0.4768\t | 0.4968\t0.5138\t0.5398\t0.3260\t0.4525\t0.7073\t | 0.2001\t0.1039\t0.2953\t | 0.006088\n","43\t | 0.5116\t0.4768\t | 0.4968\t0.5138\t0.5399\t0.3254\t0.4523\t0.7079\t | 0.2001\t0.1036\t0.2957\t | 0.005644\n","44\t | 0.5116\t0.4768\t | 0.4968\t0.5138\t0.5401\t0.3249\t0.4522\t0.7086\t | 0.2001\t0.1034\t0.2960\t | 0.005231\n","45\t | 0.5116\t0.4767\t | 0.4968\t0.5138\t0.5402\t0.3244\t0.4521\t0.7092\t | 0.2001\t0.1031\t0.2963\t | 0.004849\n","46\t | 0.5116\t0.4767\t | 0.4968\t0.5137\t0.5403\t0.3239\t0.4520\t0.7097\t | 0.2001\t0.1029\t0.2966\t | 0.004495\n","47\t | 0.5117\t0.4767\t | 0.4968\t0.5137\t0.5404\t0.3235\t0.4518\t0.7102\t | 0.2001\t0.1027\t0.2968\t | 0.004167\n","48\t | 0.5117\t0.4767\t | 0.4968\t0.5137\t0.5404\t0.3231\t0.4517\t0.7107\t | 0.2001\t0.1025\t0.2970\t | 0.003863\n","49\t | 0.5117\t0.4766\t | 0.4968\t0.5137\t0.5405\t0.3227\t0.4516\t0.7111\t | 0.2001\t0.1023\t0.2972\t | 0.003581\n","50\t | 0.5117\t0.4766\t | 0.4968\t0.5137\t0.5406\t0.3224\t0.4516\t0.7115\t | 0.2001\t0.1021\t0.2974\t | 0.003320\n","51\t | 0.5117\t0.4766\t | 0.4968\t0.5136\t0.5407\t0.3221\t0.4515\t0.7119\t | 0.2001\t0.1020\t0.2976\t | 0.003078\n","52\t | 0.5117\t0.4766\t | 0.4968\t0.5136\t0.5407\t0.3218\t0.4514\t0.7122\t | 0.2001\t0.1018\t0.2978\t | 0.002854\n","53\t | 0.5117\t0.4766\t | 0.4968\t0.5136\t0.5408\t0.3215\t0.4513\t0.7126\t | 0.2001\t0.1017\t0.2980\t | 0.002646\n","54\t | 0.5117\t0.4765\t | 0.4968\t0.5136\t0.5408\t0.3213\t0.4513\t0.7129\t | 0.2001\t0.1016\t0.2981\t | 0.002453\n","55\t | 0.5117\t0.4765\t | 0.4968\t0.5136\t0.5409\t0.3210\t0.4512\t0.7131\t | 0.2001\t0.1014\t0.2982\t | 0.002274\n","56\t | 0.5117\t0.4765\t | 0.4968\t0.5136\t0.5409\t0.3208\t0.4512\t0.7134\t | 0.2001\t0.1013\t0.2984\t | 0.002109\n","57\t | 0.5117\t0.4765\t | 0.4968\t0.5135\t0.5410\t0.3206\t0.4511\t0.7136\t | 0.2001\t0.1012\t0.2985\t | 0.001955\n","58\t | 0.5118\t0.4765\t | 0.4968\t0.5135\t0.5410\t0.3204\t0.4511\t0.7139\t | 0.2001\t0.1011\t0.2986\t | 0.001813\n","59\t | 0.5118\t0.4765\t | 0.4968\t0.5135\t0.5411\t0.3203\t0.4510\t0.7141\t | 0.2001\t0.1011\t0.2987\t | 0.001681\n","60\t | 0.5118\t0.4765\t | 0.4968\t0.5135\t0.5411\t0.3201\t0.4510\t0.7143\t | 0.2001\t0.1010\t0.2988\t | 0.001558\n","61\t | 0.5118\t0.4765\t | 0.4968\t0.5135\t0.5411\t0.3200\t0.4509\t0.7144\t | 0.2001\t0.1009\t0.2989\t | 0.001445\n","62\t | 0.5118\t0.4765\t | 0.4968\t0.5135\t0.5412\t0.3198\t0.4509\t0.7146\t | 0.2001\t0.1008\t0.2990\t | 0.001340\n","63\t | 0.5118\t0.4764\t | 0.4968\t0.5135\t0.5412\t0.3197\t0.4509\t0.7148\t | 0.2001\t0.1008\t0.2990\t | 0.001242\n","64\t | 0.5118\t0.4764\t | 0.4968\t0.5134\t0.5412\t0.3196\t0.4508\t0.7149\t | 0.2001\t0.1007\t0.2991\t | 0.001152\n","65\t | 0.5118\t0.4764\t | 0.4969\t0.5134\t0.5412\t0.3195\t0.4508\t0.7150\t | 0.2001\t0.1007\t0.2992\t | 0.001068\n","66\t | 0.5118\t0.4764\t | 0.4969\t0.5134\t0.5413\t0.3194\t0.4508\t0.7152\t | 0.2001\t0.1006\t0.2992\t | 0.000990\n","\n","Обучение завершено за 66 эпох!\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x360 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAA34AAAE9CAYAAABUerD/AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdeXhU5fn/8fcdZIsgIg0uQAgKYhUwuCCoFXDDFdQvKHyDoqLU+qXSFqtiCiIatRWrdfspbrhExKJWVBSkErGLCrggiygICYsi4AIxbIHn98czk0zCTHKCmUyS+byua6455znnzNyTh16Xd5/lNuccIiIiIiIiUn+lJDoAERERERERiS8lfiIiIiIiIvWcEj8REREREZF6TomfiIiIiIhIPafET0REREREpJ5T4iciIiIiIlLP7ZPoAKrL/vvv7zp27JjoMKQG/fTTT+y7776JDkNqkPo8+ajPk4/6PPmoz5OP+jx+FixYsNE5lxbtWr1J/A488EDmz5+f6DCkBuXl5dGnT59EhyE1SH2efNTnyUd9nnzU58lHfR4/ZpYf65qmeoqIiIiIiNRzSvxERERERETqOSV+IiIiIiIi9Vy9WeMnIiIiIsll586drFmzhm3btiU6FKmCFi1asHTp0kSHUac1adKEtm3b0rBhw8DPKPETERERkTppzZo1NG/enIyMDMws0eFIQFu2bKF58+aJDqPOcs6xadMm1qxZQ4cOHQI/p6meIiIiIlInbdu2jVatWinpk6RiZrRq1arKI91K/ERERESkzlLSJ8lob/7d15vE74svmpORAbm5iY5ERERERJLFN998w+DBgznssMM49thjOeecc/jiiy8SHZbUMnPnzuWcc86hR48enHfeeQmJoV6t8cvPhxEj/HFWVmJjEREREZH6zTnHhRdeyLBhw3jhhRcA+PTTT1m/fj2HH354gqOT2mLJkiX86U9/YvLkyRx66KEJi6PejPiFFRVBdnaioxARERGR2iY3FzIyICWFapkpNmfOHBo2bMg111xT0nb00Ufzq1/9iry8PE455RTOPfdcOnfuzDXXXMPu3bsBmDVrFr169eKYY45h0KBBFBYWljzfpUsXjjzySDIzM2nWrFlJe+Tx/Pnz6dOnDwA//fQTV155JT169KB79+68+uqrAEyePJmRI0cC8MIL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\n"},"metadata":{"needs_background":"light"}}]}]}