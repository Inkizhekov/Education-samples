{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1mM4C8RmNljtYicLwav9QCeJc1DSzw3bJ","timestamp":1662122657631}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Модель нейрона\n","**Цель работы**:\n","\n","\n","Исследовать функционирование простейшей нейронной сети (НС) на\n","базе нейрона с нелинейной функцией активации и ее обучение по правилу\n","Видроу-Хоффа."],"metadata":{"id":"D7kb9zqAhsY4"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"araz6M6Vhk0a"},"outputs":[],"source":["import numpy as np\n","from termcolor import colored\n","\n","class NeuronModel:\n","  def __init__ (self, variablesNum):\n","    \"\"\"\n","    Конструктор класса модели нейрона, принимает на вход:\n","      variablesNum: количество входных сигналов (переменных) без учета единичного смещения\n","\n","    \"\"\"\n","    self.varNum = variablesNum + 1  #   количество весов соответствует каждой \n","                                    #   входной переменной плюс единичное смещение\n","    # инициализируем веса нулями\n","    self.weight = [0 for _ in range(self.varNum)]\n","  \n","    #суммарная ошибка по эпохам\n","    self.errors = []\n","\n","    # количество эпох обучения\n","    self.epoch = 0\n","\n","  @staticmethod     # метод статический т.к. использует только переданные ему аргументы\n","  def func(x1, x2, x3, x4):\n","    \"\"\" \n","      Значение целевой функции\n","      булево значение выражения (x1 + x2 + x4) * x3\n","    \"\"\"\n","    return bool((bool(x1) | bool(x2) | bool(x4)) & bool(x3));\n","  \n","  def fill_truthTable(self):\n","    print('Таблица истинности:')\n","    print('    X    |  func')\n","    #     ' 1 1 1 1 |   1'\n","    # заводим таблицу истинности для нашей целевой функции (для начала заполним нулями)\n","    truthTable = [] # пустой список\n","    for x1 in [0,1]: \n","      for x2 in [0,1]:\n","        for x3 in [0,1]:\n","          for x4 in [0,1]:\n","            f = self.func(x1, x2, x3, x4)\n","            truthTable.append(f)\n","            print(f' {int(x1)} {int(x2)} {int(x3)} {int(x4)} |    {int(f)}')\n","  \n","    self.truthTable = truthTable \n","\n","  @staticmethod\n","  def fa1(net):\n","    \"\"\"\n","                                           / 1, net >= 0\n","    Функция активации: пороговая f(net) = {  \n","                                           \\ 0, net <  0\n","\n","    \"\"\"\n","    return 1 if (net >= 0) else 0\n","  \n","  @staticmethod\n","  def fa2(net):\n","    \"\"\"\n","                                           / 1, (1 / (1 + exp(-net))) >= 0.5\n","    Функция активации: сигмоида  f(net) = {  \n","                                           \\ 0, (1 / (1 + exp(-net))) <  0.5\n","\n","    \"\"\"\n","    return  1 if (1 / (1 + np.exp(-net))) >= 0.5 else 0\n","\n","  @staticmethod\n","  def derivative(net):\n","    \"\"\"\n","    Производная от функции активации fa2\n","    \"\"\"\n","    return (1 / (1 + np.exp(-net))) * (1 - (1 / (1 + np.exp(-net))));\n","\n","  @staticmethod\n","  def net(x1, x2, x3, x4, weight):\n","    \"\"\"\n","    Комбинированный вход\n","    \"\"\"\n","    return (           weight[0] + \n","            bool(x1) * weight[1] + \n","            bool(x2) * weight[2] + \n","            bool(x3) * weight[3] +\n","            bool(x4) * weight[4]);\n","  \n","  @staticmethod\n","  def print_warn(text, warn=True):\n","    \"\"\"\n","    Функция выводит в консоль заданный текст подсвеченный в зависимости от \n","    аргумента warn:\n","      warn == True - желтый текст на красном фоне\n","      warn == False - зеленый текст на белом фоне\n","    \"\"\"\n","    if warn:\n","      print(colored(text, 'yellow', 'on_red', attrs=['bold']), ' ', sep='', end='')\n","    else:\n","      print(colored(text, 'green', 'on_white', attrs=['bold']), ' ', sep='', end='')\n","  \n","  @staticmethod\n","  def next_permutation(a):\n","    \"\"\"\n","    Оригинальная функция взята отсюда: https://pythonadventures.wordpress.com/category/python/\n","\n","    Generates the lexicographically next permutation.\n","\n","    Input: a permutation, called \"a\". This method modifies\n","    \"a\" in place. Returns True if we could generate a next\n","    permutation. Returns False if it was the last permutation\n","    lexicographically.\n","\n","    Перевод:\n","    Генерирует лексикографически следующую перестановку.\n","\n","    Входные данные: список a. \n","    Этот метод изменяет список в процессе. \n","    Возвращает True, если бы мы могли сгенерировать следующую\n","    перестановку. \n","    Возвращает False, если это была последняя перестановка\n","    лексикографически.\n","\n","    Например для кода:\n","    a = [1,2,3]\n","    t = True\n","    while t:\n","      print(a)\n","      t = next_permutation(a)\n","    \n","    Получим следующую последовательность перестановок (3! = 6 перестановок):\n","    [1, 2, 3]\n","    [1, 3, 2]\n","    [2, 1, 3]\n","    [2, 3, 1]\n","    [3, 1, 2]\n","    [3, 2, 1]\n","\n","    \"\"\"\n","    i = len(a) - 2\n","    while not (i < 0 or a[i] < a[i+1]):\n","        i -= 1\n","    if i < 0:\n","        return False\n","    # else\n","    j = len(a) - 1\n","    while not (a[j] > a[i]):\n","        j -= 1\n","    a[i], a[j] = a[j], a[i]        # swap\n","    a[i+1:] = reversed(a[i+1:])    # reverse elements from position i+1 till the end of the sequence\n","    return True\n","\n","\n","  def full_training(self, mode):\n","    \"\"\"\n","    Метод, выполняющий тренировку нейрона на полных имеющихся у нас данных\n","    т.е. на всей таблице соответствия\n","\n","    mode - функция активации (ФА)\n","      mode == 1                                          / 1, net >= 0\n","                  Функция активации: пороговая f(net) = {  \n","                                                         \\ 0, net <  0\n","      mode == 2  \n","                                               / 1, (1 / (1 + exp(-net))) >= 0.5\n","        Функция активации: сигмоида  f(net) = {  \n","                                               \\ 0, (1 / (1 + exp(-net))) <  0.5\n","\n","\n","    \"\"\"\n","\n","    # заполняем таблицу соответствия \n","    self.fill_truthTable();\n","\n","    print('\\n')\n","    error = 1; # Расстояние Хемминга\n","    self.epoch = 0;  # количество пройденных эпох обучения\n","    \n","    while (error): \n","      print(colored(f\"Эпоха:\\t{self.epoch}\", attrs=['bold']), end='\\t');\n","      print('; ', end='')\n","      print(colored(\"Веса:\", attrs=['bold']), end='\\t')\n","      for i in range(5):\n","        print(\"{:.3f}\".format(self.weight[i]), '', end='\\t')\n","      \n","      print('; ', end='')\n","      print(colored(\"Выходной вектор y: \", attrs=['bold']), end='\\t')\n","      error = 0;  # суммарная ошибка\n","      i = 0;      # шаг обучения\n","\n","      # для каждого набора выполняем проверку\n","      for x1 in [0,1]: \n","        for x2 in [0,1]:\n","          for x3 in [0,1]:\n","            for x4 in [0,1]:\n","              fa = -1; #значение ФА\n","              # рассчитаем значение комбинированного входа\n","              netVal = self.net(x1, x2, x3, x4, self.weight);\n","\n","              #  зависимости от выбранной функции активации посчитаем её\n","              if (mode == 1):\n","                fa = self.fa1(netVal)\n","              elif (mode == 2):\n","                fa = self.fa2(netVal)\n","              \n","              # вывод в консоль значения функции активации полученное в результате расчета\n","              self.print_warn(fa, warn=self.truthTable[i] != fa)\n","\n","              # если значение функции активации не совпало (есть ошибка) с \n","              # ожидаемым значением (учителем)\n","              if self.truthTable[i] != fa: #выполняем процедуру коррекции весов\n","                error += 1\n","                \n","                for k in range(5):\n","                  x = 0\n","                  if k == 0:  x = 1   # вес для единичного смещения\n","                  if k == 1:  x = x1  # вес для входа x1\n","                  if k == 2:  x = x2  # вес для входа x2\n","                  if k == 3:  x = x3  # вес для входа x3\n","                  if k == 4:  x = x4  # вес для входа x4\n","                  \n","                  # зависимости от ФА посчитаем коррекцию по правилу Видроу-Хоффа\n","                  if mode == 1:\n","                    # для пороговой ФА производная равна 1\n","                    self.weight[k] = self.weight[k] + 0.3 * (self.truthTable[i] - fa) * 1* x\n","                  elif mode == 2:\n","                    self.weight[k] = self.weight[k] + 0.3 * (self.truthTable[i] - fa) * (self.derivative(netVal)) * x\n","             \n","              i+=1\n","      self.epoch += 1\n","      print('; ', end='')\n","      self.errors.append(error)  # заносим суммарную ошибку в массив\n","      print(f\"Суммарная ошибка: {error}\")\n","\n","  def min_training(self, mode):\n","    \"\"\"\n","    Метод, выполняющий тренировку нейрона на неполных данных:\n","    Последовательно проводим обучение на наборе данных (x1-x4) состоящем из 1 вектора, \n","    затем из двух векторов и т.д. При этом происходит полный перебор и обучение на \n","    всех возможных вариантах обучающих векторов определенного количества на данном этапе\n","    При этом проверка на тестовой выборке показывает как прошло обучение.\n","    Если проверка на тестовой выборке не успешна, количество обучающих векторов увеличивается на 1\n","\n","    таким образом происходит поиск минимальной последовательности, с помощью которой\n","    можно обучит нейрон, не используя все имеющиеся у нас исходные данные.\n","    при этом модель юудет точно предсказывать оставшиеся комбинации векторов.\n","\n","    \"\"\"\n","    self.fill_truthTable();\n","    self.counter = 0    # счетчик использованных комбинаций векторов \n","                        # для достижения минимальной последовательности\n","    \n","    #цикл, перебирающий все возможные комбинации векторов (сначала исп-ся 1 в-р, потом 2 и т д)\n","    for vecNum in range (1,17): #17\n","      success = 0 # признак успешности обучения и проверки на тестовой выборке\n","      # битовый вектор неполного набора (слева направо 1-16: количество использованных векторов для обучения)\n","      bitmask = [1 if x <= vecNum else 0 for x in range(16, 0, -1)]\n","      \n","      while True:\n","        self.counter += 1 \n","        minSet = []   #Здесь храним вектора минимальной выбоки для обучения\n","                      # т.е. номера строк из таблицы соотвтествия, которые мы выбираем для обучения\n","        \n","        # обнуляем веса\n","        for i in range(self.varNum):\n","          self.weight[i] = 0;\n","        \n","        # строим минимальный объем обучения по битовой маске\n","        for i in range(16):# [0..N-1] integers\n","          if bitmask[i]:\n","            minSet.append(i) # min набор векторов\n","        # в результате minSet это список номеров строк таблицы соответствия, \n","        # которые будут на данном этапе использоваться для обучения\n","\n","        error = 1 # Расстояние Хемминга\n","        self.epoch = 0;\n","        self.errors = []\n","\n","        while (error):\n","          # вывод информации закомментирован т.е. её генерируется очень много и от этого тормозит выполнение\n","\n","          #print(colored(f\"Эпоха:\\t{self.epoch}\", attrs=['bold']), end='\\t');\n","          #print('; ', end='')\n","          #print(colored(\"Веса:\", attrs=['bold']), end='\\t')\n","          #for i in range(5):\n","            #print(\"{:.3f}\".format(self.weight[i]), '', end='\\t')\n","      \n","          #print('; ', end='')\n","          #print(colored(\"Выходной вектор y: \", attrs=['bold']), end='\\t')\n","          error = 0;  # суммарная ошибка\n","        \n","          for set_ in minSet:\n","          # преобразование номера строки таблицы в значения x1-x4 по разложению\n","          # его в двоичный формат и присвоедию младщих 4 бит переменным x1-x4\n","            _,_,_,_, x1, x2, x3, x4 = format(set_, '0>8b')\n","            fa = -1 # значение ФА\n","            netVal = self.net(int(x1), int(x2), int(x3), int(x4), self.weight)\n","          \n","            if (mode == 1):\n","                fa = self.fa1(netVal)\n","            elif (mode == 2):\n","                fa = self.fa2(netVal)\n","              \n","            #self.print_warn(fa, warn=self.truthTable[i] != fa)\n","\n","            if self.truthTable[set_] != fa: #выполняем процедуру коррекции весов\n","                error += 1\n","                \n","                for k in range(5):\n","                  x = 0\n","                  if k == 0:  x = 1\n","                  if k == 1:  x = int(x1)\n","                  if k == 2:  x = int(x2)\n","                  if k == 3:  x = int(x3)\n","                  if k == 4:  x = int(x4)\n","                  \n","                  if mode == 1:\n","                    self.weight[k] = self.weight[k] + 0.3 * (self.truthTable[set_] - fa) * x\n","                  elif mode == 2:\n","                    self.weight[k] = self.weight[k] + 0.3 * (self.truthTable[set_] - fa) * (self.derivative(netVal)) * x\n","        \n","          self.epoch += 1\n","          #print('; ', end='')\n","          self.errors.append(error)  # заносим суммарную ошибку в массив\n","          #print(f\"Суммарная ошибка: {error}\")\n","\n","        if (error == 0): # Обучение на обучающей выборке завершено\n","          #print(\"Выходной вектор на тестовой выборке: \", end='')\n","        \n","          # проверяем обученную на данном этапе модель на тестовой выборке\n","          i = 0\n","          for x1 in [0,1]: \n","            for x2 in [0,1]:\n","              for x3 in [0,1]:\n","                for x4 in [0,1]:\n","                  fa = -1; #значение ФА\n","                  netVal = self.net(x1, x2, x3, x4, self.weight);\n","\n","                  if (mode == 1):\n","                    fa = self.fa1(netVal)\n","                  elif (mode == 2):\n","                    fa = self.fa2(netVal)\n","                          \n","                  #self.print_warn(fa, warn=self.truthTable[i] != fa)\n","                  if self.truthTable[i] != fa: # Ошибка на тестовой выборке\n","                    error += 1\n","                \n","                  i += 1\n","\n","          #print(f\"Суммарная ошибка на тестовой выборке: {error}\" )\n","      \n","        # если после проверки на тестовой выборке не осталось ошибок, томодель обучена\n","        if error == 0:\n","          success = 1;\n","          print(\"Минимальная выборка для обучения НС:\")\n","        \n","          for set_ in minSet:\n","            print(format(set_, '0>4b'), end=' ')\n","          print()\n","\n","          print(f\"За {self.epoch} эпох Весовой вектор:\")\n","          \n","          for i in range(5):\n","            print(\"{:.3f}\".format(self.weight[i]), '', end='\\t')\n","          print()\n","\n","          break;\n","      \n","        if not self.next_permutation(bitmask):\n","          break\n","    \n","      if (success):\n","        break"]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","print (\"Обучение на полном наборе:\")\n","print (\"ФА1\")\n","nm1 = NeuronModel(4);\n","nm1.full_training(1);\n","print ()\n","\n","print (\"ФА2\")\n","nm2 = NeuronModel(4);\n","nm2.full_training(2);\n","\n","\n","plt.plot(nm1.errors, label='ФА1 полный набор')\n","plt.plot(nm2.errors, label='ФА2 полный набор')\n","plt.xlabel('Количество эпох обучения')\n","plt.ylabel('Суммарная ошибка за эпоху')\n","plt.grid()\n","plt.legend()\n","plt.show();\n","\n","print(\"Обучение на неполном наборе:\")\n","print(\"ФА1\")\n","nm3 = NeuronModel(4);\n","nm3.min_training(1);\n","print(\"Обучение на неполном наборе:\")\n","print(\"ФА2\")\n","nm4 = NeuronModel(4)\n","nm4.min_training(2)\n","\n","plt.plot(nm3.errors, label='ФА1 неполный набор')\n","plt.plot(nm4.errors, label='ФА2 неполный набор')\n","plt.xlabel('Количество эпох обучения')\n","plt.ylabel('Суммарная ошибка за эпоху')\n","plt.grid()\n","plt.legend()\n","plt.show();"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"RFLs2bZrDFR2","outputId":"605f896f-5d9d-4122-f928-4053f3304349","executionInfo":{"status":"ok","timestamp":1662122656765,"user_tz":-420,"elapsed":2046,"user":{"displayName":"Анатолий Инкижеков","userId":"04854426355593330927"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Обучение на полном наборе:\n","ФА1\n","Таблица истинности:\n","    X    |  func\n"," 0 0 0 0 |    0\n"," 0 0 0 1 |    0\n"," 0 0 1 0 |    0\n"," 0 0 1 1 |    1\n"," 0 1 0 0 |    0\n"," 0 1 0 1 |    0\n"," 0 1 1 0 |    1\n"," 0 1 1 1 |    1\n"," 1 0 0 0 |    0\n"," 1 0 0 1 |    0\n"," 1 0 1 0 |    1\n"," 1 0 1 1 |    1\n"," 1 1 0 0 |    0\n"," 1 1 0 1 |    0\n"," 1 1 1 0 |    1\n"," 1 1 1 1 |    1\n","\n","\n","\u001b[1mЭпоха:\t0\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t0.000 \t0.000 \t0.000 \t0.000 \t0.000 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 5\n","\u001b[1mЭпоха:\t1\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-0.300 \t-0.300 \t0.000 \t0.600 \t0.300 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 6\n","\u001b[1mЭпоха:\t2\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-0.300 \t0.000 \t0.000 \t1.200 \t0.000 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 1\n","\u001b[1mЭпоха:\t3\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-0.600 \t0.000 \t0.000 \t0.900 \t0.000 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 2\n","\u001b[1mЭпоха:\t4\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-0.600 \t0.000 \t0.000 \t0.900 \t0.300 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 4\n","\u001b[1mЭпоха:\t5\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-0.600 \t0.000 \t0.000 \t1.200 \t0.300 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 1\n","\u001b[1mЭпоха:\t6\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-0.900 \t0.000 \t0.000 \t0.900 \t0.300 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 2\n","\u001b[1mЭпоха:\t7\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-0.900 \t0.000 \t0.000 \t0.900 \t0.600 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 4\n","\u001b[1mЭпоха:\t8\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-0.900 \t0.000 \t0.000 \t1.200 \t0.600 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 4\n","\u001b[1mЭпоха:\t9\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-0.900 \t0.000 \t0.300 \t1.500 \t0.300 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 1\n","\u001b[1mЭпоха:\t10\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-1.200 \t0.000 \t0.300 \t1.200 \t0.300 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 2\n","\u001b[1mЭпоха:\t11\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-1.200 \t0.000 \t0.300 \t1.200 \t0.600 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 4\n","\u001b[1mЭпоха:\t12\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-1.200 \t0.000 \t0.300 \t1.500 \t0.600 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 3\n","\u001b[1mЭпоха:\t13\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-1.500 \t0.000 \t0.000 \t1.500 \t0.300 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 2\n","\u001b[1mЭпоха:\t14\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-1.500 \t0.000 \t0.000 \t1.500 \t0.600 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 2\n","\u001b[1mЭпоха:\t15\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-1.500 \t0.000 \t0.000 \t1.500 \t0.900 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 2\n","\u001b[1mЭпоха:\t16\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-1.500 \t0.000 \t0.300 \t1.500 \t0.900 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 2\n","\u001b[1mЭпоха:\t17\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-1.500 \t0.000 \t0.600 \t1.500 \t0.900 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 4\n","\u001b[1mЭпоха:\t18\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-1.500 \t0.000 \t0.900 \t1.800 \t0.600 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 3\n","\u001b[1mЭпоха:\t19\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-1.800 \t0.000 \t0.600 \t1.800 \t0.300 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 2\n","\u001b[1mЭпоха:\t20\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-1.800 \t0.000 \t0.600 \t1.800 \t0.600 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 2\n","\u001b[1mЭпоха:\t21\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-1.800 \t0.000 \t0.600 \t1.800 \t0.900 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 2\n","\u001b[1mЭпоха:\t22\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-1.800 \t0.000 \t0.900 \t1.800 \t0.900 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 3\n","\u001b[1mЭпоха:\t23\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-2.100 \t0.000 \t0.600 \t1.800 \t0.600 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 1\n","\u001b[1mЭпоха:\t24\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-1.800 \t0.300 \t0.600 \t2.100 \t0.600 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 1\n","\u001b[1mЭпоха:\t25\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-2.100 \t0.300 \t0.600 \t1.800 \t0.600 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 0\n","\n","ФА2\n","Таблица истинности:\n","    X    |  func\n"," 0 0 0 0 |    0\n"," 0 0 0 1 |    0\n"," 0 0 1 0 |    0\n"," 0 0 1 1 |    1\n"," 0 1 0 0 |    0\n"," 0 1 0 1 |    0\n"," 0 1 1 0 |    1\n"," 0 1 1 1 |    1\n"," 1 0 0 0 |    0\n"," 1 0 0 1 |    0\n"," 1 0 1 0 |    1\n"," 1 0 1 1 |    1\n"," 1 1 0 0 |    0\n"," 1 1 0 1 |    0\n"," 1 1 1 0 |    1\n"," 1 1 1 1 |    1\n","\n","\n","\u001b[1mЭпоха:\t0\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t0.000 \t0.000 \t0.000 \t0.000 \t0.000 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 4\n","\u001b[1mЭпоха:\t1\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-0.000 \t0.000 \t-0.000 \t0.150 \t-0.000 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 1\n","\u001b[1mЭпоха:\t2\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-0.075 \t0.000 \t-0.000 \t0.075 \t-0.000 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 6\n","\u001b[1mЭпоха:\t3\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-0.075 \t-0.075 \t0.000 \t0.225 \t-0.000 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 2\n","\u001b[1mЭпоха:\t4\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-0.075 \t0.000 \t0.000 \t0.225 \t-0.000 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 1\n","\u001b[1mЭпоха:\t5\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-0.149 \t0.000 \t0.000 \t0.151 \t-0.000 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 2\n","\u001b[1mЭпоха:\t6\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-0.150 \t0.000 \t0.000 \t0.150 \t0.074 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 2\n","\u001b[1mЭпоха:\t7\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-0.150 \t0.000 \t0.000 \t0.150 \t0.149 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 4\n","\u001b[1mЭпоха:\t8\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-0.150 \t0.000 \t-0.000 \t0.225 \t0.149 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 4\n","\u001b[1mЭпоха:\t9\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-0.150 \t0.000 \t0.075 \t0.299 \t0.074 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 1\n","\u001b[1mЭпоха:\t10\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-0.225 \t0.000 \t0.075 \t0.225 \t0.074 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 2\n","\u001b[1mЭпоха:\t11\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-0.225 \t0.000 \t0.075 \t0.225 \t0.149 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 4\n","\u001b[1mЭпоха:\t12\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-0.225 \t0.000 \t0.075 \t0.300 \t0.149 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 3\n","\u001b[1mЭпоха:\t13\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-0.299 \t-0.075 \t0.075 \t0.300 \t0.074 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 3\n","\u001b[1mЭпоха:\t14\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-0.225 \t0.000 \t0.075 \t0.375 \t0.149 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 1\n","\u001b[1mЭпоха:\t15\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-0.299 \t0.000 \t0.075 \t0.300 \t0.149 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 2\n","\u001b[1mЭпоха:\t16\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-0.299 \t0.000 \t0.150 \t0.300 \t0.149 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 4\n","\u001b[1mЭпоха:\t17\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-0.299 \t0.075 \t0.075 \t0.375 \t0.149 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[41m\u001b[33m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 1\n","\u001b[1mЭпоха:\t18\u001b[0m\t; \u001b[1mВеса:\u001b[0m\t-0.374 \t0.075 \t0.075 \t0.300 \t0.149 \t; \u001b[1mВыходной вектор y: \u001b[0m\t\u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m0\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m \u001b[1m\u001b[47m\u001b[32m1\u001b[0m ; Суммарная ошибка: 0\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["Обучение на неполном наборе:\n","ФА1\n","Таблица истинности:\n","    X    |  func\n"," 0 0 0 0 |    0\n"," 0 0 0 1 |    0\n"," 0 0 1 0 |    0\n"," 0 0 1 1 |    1\n"," 0 1 0 0 |    0\n"," 0 1 0 1 |    0\n"," 0 1 1 0 |    1\n"," 0 1 1 1 |    1\n"," 1 0 0 0 |    0\n"," 1 0 0 1 |    0\n"," 1 0 1 0 |    1\n"," 1 0 1 1 |    1\n"," 1 1 0 0 |    0\n"," 1 1 0 1 |    0\n"," 1 1 1 0 |    1\n"," 1 1 1 1 |    1\n","Минимальная выборка для обучения НС:\n","0010 0110 1010 1100 1111 \n","За 19 эпох Весовой вектор:\n","-1.500 \t0.300 \t0.600 \t1.200 \t0.600 \t\n","Обучение на неполном наборе:\n","ФА2\n","Таблица истинности:\n","    X    |  func\n"," 0 0 0 0 |    0\n"," 0 0 0 1 |    0\n"," 0 0 1 0 |    0\n"," 0 0 1 1 |    1\n"," 0 1 0 0 |    0\n"," 0 1 0 1 |    0\n"," 0 1 1 0 |    1\n"," 0 1 1 1 |    1\n"," 1 0 0 0 |    0\n"," 1 0 0 1 |    0\n"," 1 0 1 0 |    1\n"," 1 0 1 1 |    1\n"," 1 1 0 0 |    0\n"," 1 1 0 1 |    0\n"," 1 1 1 0 |    1\n"," 1 1 1 1 |    1\n","Минимальная выборка для обучения НС:\n","0010 0111 1010 1101 \n","За 11 эпох Весовой вектор:\n","-0.224 \t0.001 \t0.076 \t0.224 \t0.076 \t\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]}]}